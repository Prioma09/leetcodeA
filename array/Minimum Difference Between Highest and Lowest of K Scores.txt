
You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.

Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.

Return the minimum possible difference.

/////////////////////////////////////////////////////////
class Solution {
    public int minimumDifference(int[] nums, int k) {
        if(k<=1) return 0;

        Arrays.sort(nums);
        int l = 0;
        int r = l+k-1;
        int diff = Integer.MAX_VALUE;

        while(r<nums.length){
            diff = Math.min(diff,nums[r]-nums[l]);
            l++;
            r++;
        }
        return diff;

    }
}
///////////////////////////////////////////////////////////
Time Complexity: O(n log n)
Space Complexity: O(1)

Therefore, the overall time complexity of the solution is dominated by the sorting step, which is O(n log n), where n is the number of elements in the input array.

As for space complexity, the provided solution does not use any additional data structures that grow with the size of the input array. Therefore, the space complexity is O(1), indicating constant space usage regardless of the size of the input array.



